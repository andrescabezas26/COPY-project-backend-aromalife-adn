name: CI/CD - SonarQube + Trivy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Permisos necesarios para GitHub Advanced Security
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

env:
  NODE_VERSION: "20"

jobs:
  # ============================================
  # Job 1: Trivy Security Scan (PRIMERO)
  # ============================================
  trivy-security-scan:
    name: 🔒 Trivy Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 🔍 Scan en formato tabla para ver en logs
      - name: 🔍 Run Trivy scanner (Table format)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0"

      # 🔍 Scan en formato SARIF para GitHub Security
      - name: 🔍 Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      # 📊 Subir resultados SARIF a GitHub Security
      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-fs"

      # 🔍 Scan en formato JSON para artifacts
      - name: 🔍 Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "json"
          output: "trivy-report.json"
          severity: "CRITICAL,HIGH,MEDIUM"

      # 📤 Subir reporte JSON como artifact
      - name: 📤 Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-report
          path: trivy-report.json
          retention-days: 30

  # ============================================
  # Job 2: Tests y Coverage
  # ============================================
  test-and-coverage:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: trivy-security-scan

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧪 Run tests with coverage
        run: npm run test:cov
        continue-on-error: true

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

  # ============================================
  # Job 3: SonarQube Analysis
  # ============================================
  sonarqube-analysis:
    name: 📊 SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test-and-coverage

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test:cov
        continue-on-error: true

      # Opción 1: Usar SonarQube Scanner CLI
      - name: 📥 Install Sonar Scanner
        run: npm install -g sonarqube-scanner

      - name: 📊 SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.projectKey=aromalife-backend \
            -Dsonar.sources=src \
            -Dsonar.tests=test \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts,**/test/**,**/dist/**,**/coverage/**

      # Opción 2: Descomentar si prefieres usar la action oficial
      # - name: 📊 SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=aromalife-backend
      #       -Dsonar.sources=src
      #       -Dsonar.tests=test
      #       -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
      #       -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # ============================================
  # Job 4: Security Report Summary
  # ============================================
  security-report:
    name: 📋 Security Report Summary
    runs-on: ubuntu-latest
    needs: [trivy-security-scan, sonarqube-analysis]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download Trivy report
        uses: actions/download-artifact@v4
        with:
          name: trivy-security-report
        continue-on-error: true

      - name: 📊 Generate Security Summary
        run: |
          echo "# 🔒 Security & Quality Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📅 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Analysis Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Trivy Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SonarQube Code Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Reports Available" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tab:** GitHub Security > Code scanning > Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **SonarQube:** ${{ secrets.SONAR_HOST_URL }}/dashboard?id=aromalife-backend" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts:** Download detailed reports below" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Si existe el archivo trivy-report.json, mostrar resumen
          if [ -f trivy-report.json ]; then
            echo "## 🔍 Trivy Findings Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat trivy-report.json | head -n 20 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
